(define (print-error-messages err-port)
  (let loop ()
    (when (input-port-ready? err-port)
      (let ((c (read-char err-port)))
        (unless (eof-object? c)
          (printf "~a" c)
          (loop))))))

(let-values ([(to-stdin from-stdout from-stderr process-id)
              (open-process-ports "/usr/local/bin/scheme -q synthesis.scm"
                                  (buffer-mode block)
                                  (make-transcoder (utf-8-codec)))])
  (print-error-messages from-stderr)
  (printf "read msg: ~s\n" (read from-stdout))
  (print-error-messages from-stderr)
  (write `(get-status) to-stdin)
  (flush-output-port to-stdin)
  (print-error-messages from-stderr)
  (printf "read msg: ~s\n" (read from-stdout))
  (print-error-messages from-stderr)
  (let ((definitions '((define append
                         (lambda (l s)
                           (if (null? l)
                               ,A
                               (cons ,B ,C))))))
        (inputs '((append '() '())
                  (append '(,g1) '(,g2))
                  (append '(,g3) '(,g4))
                  (append '(,g5 ,g6) '(,g7 ,g8))))
        (outputs '(()
                   (,g1 ,g2)
                   (,g3 ,g4)
                   (,g5 ,g6 ,g7 ,g8)))
        (synthesis-id 1))
    (print-error-messages from-stderr)    
    (write `(synthesize (,definitions ,inputs ,outputs) ,synthesis-id) to-stdin)    
    (flush-output-port to-stdin)
    (printf "wrote synthesize message\n")
    (print-error-messages from-stderr)
    (write `(get-status) to-stdin)
    (flush-output-port to-stdin)
    (printf "wrote get-status message\n")
    (print-error-messages from-stderr)
    (printf "read msg: ~s\n" (read from-stdout))
    (print-error-messages from-stderr)
    (printf "read msg: ~s\n" (read from-stdout))
    (print-error-messages from-stderr)    
    (write `(get-status) to-stdin)
    (flush-output-port to-stdin)
    (printf "wrote get-status message\n")
    (print-error-messages from-stderr)
    (printf "read msg: ~s\n" (read from-stdout))
    (printf "read msg: ~s\n" (read from-stdout))
    (printf "read msg: ~s\n" (read from-stdout))
    ))
