Overall/Project-wide
====================

GUI can now stream multiple results from multiple synthesis-finished message, but in an ugly way.  Clean up the messages!

We added a terrible hack to the ((,scp-id ,num-processors ,synthesis-task-id*) . ,rest) case in MCP, in which we call the loop even after we found an SCP with a free processor.  This results in the synthesis task from the GUI being sent to a free process on each SCP, and also adds the synthesis task to the pending task table.  We should remove this call to (loop rest) and instead actually send different synthesis tasks (using different templates for example) to the different processes on different SCPs.

When there is no connected SCP with a free processor, and a synthesis task arrives, we are adding that task to the pending task table of the MCP.  We should: 1) check for pending tasks when a new SCP connects to the MCP--if there are pending tasks, we should send them to the newly connected SCP; 2) when a processor that is part of an SCP finishes, and the SCP sends a synthesis-finished message to the MCP, the MCP should check if there are any pending tasks, and if so, send a task to the newly free processor for that SCP.




The messages for returning synthesized results to the GUI (and perhaps to the MCP) need work.  Does it really make sience for the `(synthesis-finished ,synthesis-id ,val ,statistics) message sent from the MCP to the GUI to contain multiple answers?  When would this actually be useful, versus sending multiple messages, each with one answer, since we still need to handle streaming of answers?  If we do allow a single message to contain multiple values, seems like statistics should be per-answer.

Do we need separate notions of synthesis-id at the UI and MCP levels, to properly keep track of one synthesis problem from the GUI turning into multiple synthesis problems (involving different templates, for example)?

For streaming to work, seems like GUI will need to keep a table of answers received.

How can the GUI tell that synthesis has finished, as opposed to synthesis being ongoing, with more answers possibly streaming in later?  Do we need additional messages for this?

MCP should be able to send message to GUI when something goes wrong for synthesis, such as no SCPs being available.




Once the MVP is working, try to simplify!

Document the working MVP, including the motivation/design decisions/rationale/alternatives.

Check for and handle errors.

Re-architect for security.

Be less naive about load balancing--not all cores/processes are equal

Try to remove as many semaphores as possible from multi-threaded code.

Abstract over boilerplate code.

Remove mutation in code where it makes sense.

Once MVP works, implement multi-level recursive SCP architecture, so we can run on a cluster or supercomputer of arbitrary size.

Once MVP works, consider rearechitecting to allow for different search implementations, etc.

Implement alternative UIs, including browser-based using WebSockets, CLI, traditional text-editor interface, Emacs mode, etc.

Make the task compiler a compiler-compiler that takes a grammar, typing rules, operational sematics, and produces a compiler that takes a skeleton and examples/spec, and generates multiple optimized synthesis tasks.  See the 'whiteboard-december-11-2019' photos in 'documentation' for a rough sketch.

UI experiment: give user feedback on answers being streamed by doing "demonic execution" (MDA's phrase) on multiple answers to find simple inputs that generate different outputs for the synthesized programs.  Show the user these examples, and ask the user which answer is correct (or whether none of the answers are correct, hopefully with a correct answer as well).  This idea came out of a synthesis discussion on 01/03/2020 between Michael D. Adams, Nada Amin, Michael Ballanyne, Will Byrd, David Moon, Cyrus Omar, and Greg Rosenblatt.

Consider using `pmatch` in Racket code as well as Chez Scheme code, so we only have to deal with one pattern-matching syntax.


---
The asymmetry in how inputs and outputs are handled in `synthesis-template.scm`:

(define (fill-in-template definitions inputs outputs)
   (let ((definitions (cons 'quasiquote (list definitions)))
         (inputs (cons 'quasiquote (list inputs)))
         (outputs (cons 'list outputs)))
     ...

is why you need to use quotes in the input when using gensyms, such as (append '(,g1) '(,g2)),
but must use quasiquotes in the outout, such as `(,g1 ,g2).  The original Barliman also has this issue.
We should figure out how to avoid this inconsistency.
---


==
UI
==

gui.rkt
-------

GUI should clearly display when synthesis has completed, versus when
synthesis is still running (and might stream additional answers)

GUI should display running status.

GUI should display if synthesis can't run (for example, no SCPs are available)

Improve pretty-printing of synthesized code

Display the statistics info.

Stream results, and allow the user to select one of the generated results.

Add the ability to test/interact with/try new tests with the proposed results.

testing
-------
test side-condition printing

make sure all critical messages are handled properly by the UI and the MCP

check all the states of stopping synthesis, disconnecting/reconnecting, starting a new syntrhesis problem, etc.

====
MCP
====

Update code to properly handle multiple synthesis tasks from one original UI synthesis request.

mcp.scm
-------
implement load-balancing, and properly send new synthesis tasks when an SCP finishes a task

make sure tables of synthesis tasks/SCP info are properly updated (this seems intricate to get right)

Is there a better way to avoid burning up CPU time in the event processing loop, other than calling `sleep`?  At least in the Racket proxy code we can call blocking `read`.

synthesis-task-compiler.scm
---------------------------
implement minimal template functionality

mcp-scp-tcp-proxy.rkt
---------------------

mcp-ui-tcp-proxy.rkt
--------------------

testing
-------
test with multiple SCPs, and with SCPs connecting, disconnecting, and sometimes reconnecting

test with multiple synthesis tasks produced by one UI synthesis request


===
SCP
===

scp.scm
-------

scp-tcp-proxy.rkt
-----------------

testing
-------
